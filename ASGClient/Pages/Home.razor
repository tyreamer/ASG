@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using ASGShared.Models
@using ASG.Services
@using ASGClient.Components
@using Microsoft.AspNetCore.Components
@using MudBlazor
@using ASGClient.Helpers
@inject IJSRuntime JsRuntime
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject MealPlanClientService MealPlanClientService
@inject UserClientService UserClientService
@inject IDialogService DialogService

<MudContainer Class="bg-gray-50">

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else if (isAuthenticated)
    {
        <MudContainer Class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
            <MudContainer Class="px-4 py-6 sm:px-0">
                <br/>

                <br />
                @if (isRegenerating)
                {                    
                    <MudText Typo="Typo.h6" Class="d-flex align-center justify-center">
                        <MudIcon Icon="@Icons.Material.Filled.AutoFixHigh"></MudIcon>
                        Hang Tight! We’re plating up your personalized recipes...
                    </MudText>
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
                else if(weeklyPlan.Recipes != null)
                {
                    <MudContainer Class="flex flex-col items-center mb-6">
                        <MudText Typo="Typo.h4" Align="Align.Center">Week of @mealPlanStartDate.ToString("MMMM dd, yyyy")</MudText>

                        <!-- Centered Button with width control and flexbox -->
                        <MudContainer Class="d-flex justify-center w-100 mt-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto" OnClick="OpenGroceryListDialog">
                                <MudIcon Icon="@Icons.Material.Filled.List" Class="mr-2" />
                                View Grocery List
                            </MudButton>
                        </MudContainer>
                    </MudContainer>

                    @foreach (var recipe in weeklyPlan.Recipes)
                    {
                        <MudContainer Class="mb-8 recipe-container max-w-screen-md mx-auto">
                            <MudPaper Elevation="0" Class="pa-4 rounded-lg shadow-sm border border-gray-500">
                                <!-- Recipe Name and Prep Time (Top Section) -->
                                <MudGrid>
                                    <MudItem xs="9">
                                        <MudText Typo="Typo.h6" Class="font-weight-bold">@recipe.Recipe.Name</MudText>
                                    </MudItem>
                                    <MudItem xs="3" Class="d-flex justify-end align-center">
                                        <MudText Typo="Typo.h5" Class="font-weight-bold pa-2 rounded">@recipe.Recipe.PrepTime</MudText>
                                    </MudItem>
                                </MudGrid>

                                <!-- Calories Information -->
                                <MudText Typo="Typo.caption" Class="mt-2 text-gray">Calories: @recipe.Recipe.Calories</MudText>

                                <!-- Ingredients -->
                                <MudText Typo="Typo.body2" Class="mt-4">
                                    @string.Join(", ", recipe.Recipe.Ingredients)
                                </MudText>

                                <!-- Thumbs Up/Down and View Recipe Section (Bottom Section) -->
                                <MudGrid Class="mt-4 align-center">
                                    <MudItem xs="6" Class="d-flex">
                                        <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" Color="Color.Info" Size="Size.Small" Class="icon-hover-warning" />
                                        <MudIconButton Icon="@Icons.Material.Filled.ThumbDown" Color="Color.Info" Size="Size.Small" Class="ml-2 icon-hover-warning" OnClick="() => ConfirmDislikeRecipe(recipe.Recipe)" />
                                    </MudItem>
                                    <MudItem xs="6" Class="d-flex justify-end">
                                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" EndIcon="@Icons.Material.Filled.ArrowForward" Size="Size.Small" OnClick="() => ViewRecipe(recipe.Recipe)">
                                            VIEW RECIPE
                                        </MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        </MudContainer>
                    }
                    <MudContainer Class="flex flex-col items-center mb-6">
                        <MudText Typo="Typo.h6" Align="Align.Center">Not feeling this week’s meals? We can cook up some new suggestions!</MudText>

                        <!-- Centered Regenerate Meals Button using flexbox and width control -->
                        <MudContainer Class="d-flex justify-center w-100 mt-4">
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ConfirmRegeneratePlan" Class="mx-auto">
                                <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="mr-2" />
                                Regenerate Meals
                            </MudButton>
                        </MudContainer>
                    </MudContainer>

                }
                else
                {
                    <MudItem xs="12" sm="12" Class="flex justify-center mb-2 sm:mb-0">
                        <MudText Align="Align.Center">We don't have any meals planned yet! Let's get started with some fresh ideas.</MudText>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RegeneratePlan">
                            <MudIcon Icon="@Icons.Material.Filled.AutoFixHigh" Class="mr-2" />
                            Generate Meals
                        </MudButton>
                    </MudItem>
                }
            </MudContainer>
        </MudContainer>
    }
</MudContainer>

@code {
    private bool _isDarkMode;
    [CascadingParameter] private Task<AuthenticationState>? AuthStateTask { get; set; }

    private DateTime mealPlanStartDate;
    private bool isAuthenticated;
    private bool isLoading = true;
    private bool isRegenerating = false;
    private MealPlan weeklyPlan = new MealPlan();

    private async Task SignInWithGoogle()
    {
        var user = await AuthService.SignInWithGoogleAsync();
        if (user != null)
        {
            var isRegistered = await AuthService.IsUserRegisteredAsync(user.Email);
            if (!isRegistered)
            {
                Navigation.NavigateTo($"/signup?name={Uri.EscapeDataString(user.DisplayName)}&email={Uri.EscapeDataString(user.Email)}");
            }
            else
            {
                Navigation.Refresh();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthStateTask != null)
        {
            await AuthService.HandleAuthenticationAsync(AuthStateTask);
            var authState = await AuthService.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            if (isAuthenticated)
            {
                var email = authState.User.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
                if (email != null)
                {
                    weeklyPlan = await MealPlanClientService.GetWeeklyPlanAsync(email);
                    mealPlanStartDate = weeklyPlan.WeekStartDate;
                }
            }
        }
        isLoading = false;
    }

    private async Task<(string Email, UserPreferences Preferences)> GetUserEmailAndPreferences()
    {
        var authState = await AuthService.GetAuthenticationStateAsync();
        var email = authState.User.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
        if (email != null)
        {
            var userPreferences = await UserClientService.GetUserPreferencesAsync(email);
            return (email, userPreferences);
        }
        throw new InvalidOperationException("User is not authenticated or email is missing.");
    }

    private async Task RegeneratePlan()
    {
        isRegenerating = true;
        StateHasChanged();

        try
        {
            var (email, userPreferences) = await GetUserEmailAndPreferences();
            await MealPlanClientService.RegenerateMealPlanAsync(email, userPreferences);
            weeklyPlan = await MealPlanClientService.GetWeeklyPlanAsync(email);
            StateHasChanged();
        }
        catch (InvalidOperationException ex)
        {
            // Handle the exception (e.g., show a message to the user)
        }
        finally
        {
            isRegenerating = false;
        }
    }

    private async Task LikeRecipe(Recipe recipe)
    {
        await MealPlanClientService.LikeRecipeAsync(recipe);
    }

    private async Task DislikeRecipe(Recipe recipe)
    {
        //Ask user anything we should change?
        //want hot/cold, spicy/sweet? etc

        isRegenerating = true;
        StateHasChanged();

        try
        {
            var (email, userPreferences) = await GetUserEmailAndPreferences();
            await MealPlanClientService.ReplaceRecipe(email, recipe.Id, userPreferences);
            weeklyPlan = await MealPlanClientService.GetWeeklyPlanAsync(email);
            StateHasChanged();
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isRegenerating = false;
        }
    }

    private async Task OpenGroceryListDialog()
    {
        var ingredients = weeklyPlan.Recipes
            .SelectMany(r => r.Recipe.Ingredients)
            .ToList();

        var ingredientsHelper = new IngredientsHelper();
        var aggregatedIngredients = ingredientsHelper.ParseIngredients(ingredients)
            .Select(ingredient => ingredient.ToString())
            .ToList();

        var parameters = new DialogParameters { ["Ingredients"] = aggregatedIngredients };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<GroceryListDialog>("Grocery List", parameters, options);
    }

    private async Task ConfirmRegeneratePlan()
    {
        var parameters = new DialogParameters { ["Message"] = "Do you want us to regenerate your personalized recipes for the week of " + weeklyPlan.WeekStartDate.ToString("MMMM dd, yyyy") + "?" };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<ConfirmationDialog>("Confirm", parameters, options);
        var result = await dialog.Result;

        if (result != null && result.Canceled == false)
        {
            await RegeneratePlan();
        }
    }

    private async Task ConfirmDislikeRecipe(Recipe recipe)
    {
        //Ask user anything we should change?
        //want hot/cold, spicy/sweet? etc

        var parameters = new DialogParameters { ["Message"] = "Are you sure you want to remove this recipe and build a new one?" };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<ConfirmationDialog>("Confirm", parameters, options);
        var result = await dialog.Result;

        if (result != null && result.Canceled == false)
        {
            await DislikeRecipe(recipe);
        }
    }

    private void ViewRecipe(Recipe recipe)
    {
        var parameters = new DialogParameters { ["Recipe"] = recipe };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<RecipeDialog>("Recipe Details", parameters, options);
    }

    private void ViewGroceryList()
    {
        Navigation.NavigateTo("/grocery-list");
    }

    private void AdjustMealPlan()
    {
        Navigation.NavigateTo("/adjust-plan");
    }
}
