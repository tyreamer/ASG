@page "/"

@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using ASGShared.Models
@using ASG.Services
@using ASGClient.Components
@using Microsoft.AspNetCore.Components
@using MudBlazor
@using ASGClient.Helpers
@using ASGShared.Helpers
@using Microsoft.AspNetCore.WebUtilities
@inject IJSRuntime JsRuntime
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject MealPlanClientService MealPlanClientService
@inject UserClientService UserClientService
@inject IDialogService DialogService

<MudContainer Class="bg-gray-50">

    @if (isLoading)
    {
        <MudContainer Class="d-flex justify-center align-center" Style="height: 100vh;">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        </MudContainer>
    }
    else if (isAuthenticated)
    {
        <MudContainer Class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
            <MudContainer Class="px-4 py-6 sm:px-0">
                <br/>

                @if (mealPlanStartDate < GetStartOfCurrentWeek())
                {
                    <MudAlert Severity="Severity.Warning" Elevation="3" Class="mb-4">
                        Psst! You're looking at an old week.
                    </MudAlert>
                }


                <MudText Typo="Typo.h6" Align="Align.Center">Week of</MudText>
                <MudGrid Justify="Justify.SpaceBetween" AlignItems="Center" Class="mb-6">
                    <!-- Previous Week Button -->
                    <MudItem xs="4" sm="4" md="4" lg="4" Class="d-flex justify-start">
                        <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="NavigateToPreviousWeek" Variant="Variant.Text" Color="Color.Primary">
                            Previous
                        </MudButton>
                    </MudItem>

                    <!-- Center Area for Week of Text and Date (Stacked) -->
                    <MudItem xs="4" sm="4" md="4" lg="4" Class="d-flex flex-col justify-center align-center">
                        <MudText Typo="Typo.h4" Align="Align.Center">@mealPlanStartDate.ToString("MMMM dd, yyyy")</MudText>
                    </MudItem>

                    <!-- Next Week Button -->
                    <MudItem xs="4" sm="4" md="4" lg="4" Class="d-flex justify-end">
                        <MudButton EndIcon="@Icons.Material.Filled.ArrowForward" OnClick="NavigateToNextWeek" Variant="Variant.Text" Color="Color.Primary">
                            Next
                        </MudButton>
                    </MudItem>
                </MudGrid>

                <br />
                @if (isRegenerating)
                {             
                    <MudText Typo="Typo.h2" Class="d-flex align-center justify-center">
                        <MudIcon Icon="@Icons.Material.Filled.AutoFixHigh"></MudIcon>
                    </MudText>
                    <MudText Typo="Typo.h6" Class="d-flex align-center justify-center">
                        Hang Tight! We’re plating up your personalized recipes...
                    </MudText>
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
                else if (weeklyPlan.Recipes?.Count > 0)
                {

                    <!-- Centered View Grocery List Button -->
                    <MudContainer Class="d-flex justify-center w-100 mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenGroceryListDialog" Class="mx-auto">
                            <MudIcon Icon="@Icons.Material.Filled.List" Class="mr-2" />
                            View Grocery List
                        </MudButton>
                    </MudContainer>





                    <br />

                    <MudDivider></MudDivider>

                    <br />

                    <RecipeListItem Recipes="weeklyPlan.Recipes" MealPlanStartDate="mealPlanStartDate" OnRegeneratePlan="ConfirmRegeneratePlan" OnViewRecipe="ViewRecipe" OnDislikeRecipe="ConfirmDislikeRecipe" />

                    <MudContainer Class="flex flex-col items-center mb-6">
                        <MudText Typo="Typo.h6" Align="Align.Center">Not feeling this week’s meals? We can cook up some new suggestions!</MudText>

                        <MudContainer Class="d-flex justify-center w-100 mt-4">
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ConfirmRegeneratePlan" Class="mx-auto">
                                <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="mr-2" />
                                Regenerate Meals
                            </MudButton>
                        </MudContainer>
                    </MudContainer>

                }
                else
                {
                    <MudContainer Class="d-flex justify-center w-100 mt-4">
                        <MudPaper Class="pa-6" Elevation="4" Style="max-width: 400px; border-radius: 12px;">
                            <MudStack Spacing="2" Class="d-flex flex-column align-center">
                                <MudIcon Icon="@Icons.Material.Filled.RestaurantMenu" Color="Color.Primary" Size="Size.Large" />
                                <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">
                                    Ready to plan some delicious meals?
                                </MudText>
                                <MudText Typo="Typo.body1" Align="Align.Center" GutterBottom="true">
                                    Let’s get started with fresh ideas for the week!
                                </MudText>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RegeneratePlan" Class="mt-4">
                                    <MudIcon Icon="@Icons.Material.Filled.AutoFixHigh" Class="mr-2" />
                                    Generate Meals
                                </MudButton>
                            </MudStack>
                        </MudPaper>
                    </MudContainer>
                }
            </MudContainer>
        </MudContainer>
    }
</MudContainer>
<br/>
<br/>

@code {
    private bool _isDarkMode;
    [CascadingParameter] private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter]
    public DateTime? weekStartDate { get; set; }

    private DateTime mealPlanStartDate;
    private bool isAuthenticated;
    private bool isLoading = true;
    private bool isRegenerating = false;
    private MealPlan weeklyPlan = new MealPlan();

    protected override async Task OnInitializedAsync()
    {
        if (AuthStateTask != null)
        {
            await AuthService.HandleAuthenticationAsync(AuthStateTask);            
        }

        isLoading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("weekStartDate", out var weekStartDateValue))
        {
            if (DateTime.TryParse(weekStartDateValue, out var parsedDate))
            {
                weekStartDate = parsedDate;
            }
        }

        mealPlanStartDate = weekStartDate ?? GetStartOfCurrentWeek();
        await LoadMealPlanDataAsync();
    }

    private async Task LoadMealPlanDataAsync()
    {
        var authState = await AuthService.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            if (Guid.TryParse(userIdClaim, out var userId))
            {
                mealPlanStartDate = (weekStartDate ?? DateTime.Now).StartOfWeek(DayOfWeek.Sunday);
                weeklyPlan = await MealPlanClientService.GetWeeklyPlanAsync(userId, mealPlanStartDate);
            }
        }
    }

    private DateTime GetStartOfCurrentWeek()
    {
        DateTime now = DateTime.Now;
        int diff = (7 + (now.DayOfWeek - DayOfWeek.Sunday)) % 7;
        return now.AddDays(-1 * diff).Date;
    }

    private async Task<User> GetUser()
    {
        var authState = await AuthService.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (Guid.TryParse(userIdClaim, out var userId))
        {
            var user = await UserClientService.GetUserAsync(userId);
            return user;
        }

        throw new InvalidOperationException("User is not authenticated or userId is missing.");
    }

    private async Task RegeneratePlan()
    {
        isRegenerating = true;
        StateHasChanged();

        try
        {
            var user = await GetUser();
            await MealPlanClientService.RegenerateMealPlanAsync(user, mealPlanStartDate);
            weeklyPlan = await MealPlanClientService.GetWeeklyPlanAsync(user.Id);

            StateHasChanged();
        }
        catch (InvalidOperationException ex)
        {
            // Handle the exception (e.g., show a message to the user)
        }
        finally
        {
            isRegenerating = false;
        }
    }

    private async Task LikeRecipe(Recipe recipe)
    {
        await MealPlanClientService.LikeRecipeAsync(recipe);
    }

    private async Task DislikeRecipe(Recipe recipe)
    {
        isRegenerating = true;
        StateHasChanged();

        try
        {
            var user = await GetUser();
            await MealPlanClientService.ReplaceRecipe(user, recipe.Id);
            weeklyPlan = await MealPlanClientService.GetWeeklyPlanAsync(user.Id);
            StateHasChanged();
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isRegenerating = false;
        }
    }

    private async Task OpenGroceryListDialog()
    {
        var ingredients = weeklyPlan.Recipes
            .SelectMany(r => r.Recipe.Ingredients)
            .ToList();

        var ingredientsHelper = new IngredientsHelper();
        var aggregatedIngredients = ingredientsHelper.ParseIngredients(ingredients)
            .Select(ingredient => ingredient.ToString())
            .ToList();

        var parameters = new DialogParameters { ["Ingredients"] = aggregatedIngredients };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<GroceryDialog>("Grocery List", parameters, options);
    }

    private async Task ConfirmRegeneratePlan()
    {
        var parameters = new DialogParameters { ["Message"] = "Do you want us to regenerate your personalized recipes for the week of " + weeklyPlan.WeekStartDate.ToString("MMMM dd, yyyy") + "?" };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<ConfirmationDialog>("Confirm", parameters, options);
        var result = await dialog.Result;

        if (result != null && result.Canceled == false)
        {
            await RegeneratePlan();
        }
    }

    private async Task ConfirmDislikeRecipe(Recipe recipe)
    {
        //Ask user anything we should change?
        //want hot/cold, spicy/sweet? etc

        var parameters = new DialogParameters { ["Message"] = "Are you sure you want to remove this recipe and build a new one?" };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<ConfirmationDialog>("Confirm", parameters, options);
        var result = await dialog.Result;

        if (result != null && result.Canceled == false)
        {
            await DislikeRecipe(recipe);
        }
    }

    private void ViewRecipe(Recipe recipe)
    {
        var parameters = new DialogParameters { ["Recipe"] = recipe };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<RecipeDialog>("Recipe Details", parameters, options);
    }

    private void ViewGroceryList()
    {
        Navigation.NavigateTo("/grocery-list");
    }

    private void AdjustMealPlan()
    {
        Navigation.NavigateTo("/adjust-plan");
    }

    private void NavigateToNextWeek()
    {
        var nextWeekStartDate = mealPlanStartDate.AddDays(7);
        Navigation.NavigateTo($"/?weekStartDate={nextWeekStartDate:yyyy-MM-dd}");
    }

    private void NavigateToPreviousWeek()
    {
        var previousWeekStartDate = mealPlanStartDate.AddDays(-7);
        Navigation.NavigateTo($"/?weekStartDate={previousWeekStartDate:yyyy-MM-dd}");
    }
}