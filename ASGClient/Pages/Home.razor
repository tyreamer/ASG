@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using ASGShared.Models
@using ASG.Services
@using ASGClient.Components
@using Microsoft.AspNetCore.Components
@using MudBlazor
@inject IJSRuntime JsRuntime
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject MealPlanClientService MealPlanClientService
@inject UserClientService UserClientService
@inject IDialogService DialogService

<MudContainer Class="min-h-screen bg-gray-50">
    <MudAppBar Elevation="0" Color="Color.Transparent">
        <MudContainer Class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
            <MudText Typo="Typo.h4" Class="text-white">Anything sounds good.</MudText>
            @if (isLoading)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            }
            else if (!isAuthenticated)
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="SignInWithGoogle">
                    Sign In with Google
                </MudButton>
            }
        </MudContainer>
    </MudAppBar>

    @if (isAuthenticated)
    {
        <MudContainer Class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
            <MudContainer Class="px-4 py-6 sm:px-0">
                <MudContainer Class="flex justify-between items-center mb-6">
                    <MudText Typo="Typo.h4">This Week's Plan</MudText>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RegeneratePlan">
                        <MudIcon Icon="refresh" Class="mr-2" />
                        Regenerate Plan
                    </MudButton>
                </MudContainer>

                @if (isRegeneratingMealPlan)
                {
                    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                    <MudText Typo="Typo.body1" Class="mt-2">Replacing meal...</MudText>
                }
                else
                {
                    <MudGrid Class="max-w-7xl">
                        @foreach (var recipe in weeklyPlan)
                        {
                            <MudItem xs="12">
                                <MudPaper Class="p-4 mb-4">
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.h6">@recipe.Name</MudText>
                                                <MudText Typo="Typo.body1" Class="mt-1">@string.Join(", ", recipe.Ingredients)</MudText>
                                            </MudItem>
                                            <MudItem xs="6" Class="text-right">
                                                <MudText Typo="Typo.caption" Class="text-gray-500">Calories: @recipe.Calories</MudText>
                                                <MudText Typo="Typo.caption" Class="text-gray-500">Cooking Time: @recipe.PrepTime</MudText>
                                            </MudItem>
                                        </MudGrid>
                                        <MudContainer Class="mt-4 flex justify-between items-center">
                                            <MudContainer Class="flex space-x-2">
                                                <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" Color="Color.Primary" OnClick="() => LikeRecipe(recipe)" Style="color: blue; background-color: white;" />
                                                <MudIconButton Icon="@Icons.Material.Filled.ThumbDown" Color="Color.Primary" OnClick="() => DislikeRecipe(recipe)" Style="color: blue; background-color: white;" />
                                            </MudContainer>
                                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ViewRecipe(recipe)">
                                                View Recipe
                                                <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Class="ml-1" />
                                            </MudButton>
                                        </MudContainer>
                                    </MudPaper>
                                </MudItem>
                        }
                    </MudGrid>
                }

                <MudContainer Class="mt-8 flex justify-center space-x-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ViewGroceryList">
                        <MudIcon Icon="shopping_cart" Class="mr-2" />
                        View Grocery List
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AdjustMealPlan">
                        <MudIcon Icon="calendar_today" Class="mr-2" />
                        Adjust Meal Plan
                    </MudButton>
                </MudContainer>
            </MudContainer>
        </MudContainer>
    }
</MudContainer>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthStateTask { get; set; }

    private bool isAuthenticated;
    private bool isLoading = true;
    private bool isRegeneratingMealPlan = false;
    private List<Recipe> weeklyPlan = new List<Recipe>();

    private async Task SignInWithGoogle()
    {
        var user = await AuthService.SignInWithGoogleAsync();
        if (user != null)
        {
            var isRegistered = await AuthService.IsUserRegisteredAsync(user.Email);
            if (!isRegistered)
            {
                Navigation.NavigateTo($"/signup?name={Uri.EscapeDataString(user.DisplayName)}&email={Uri.EscapeDataString(user.Email)}");
            }
            else
            {
                Navigation.Refresh();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthStateTask != null)
        {
            await AuthService.HandleAuthenticationAsync(AuthStateTask);
            var authState = await AuthService.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            if (isAuthenticated)
            {
                var email = authState.User.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
                if (email != null)
                {
                    weeklyPlan = await MealPlanClientService.GetWeeklyPlanAsync(email);
                }
            }
        }
        isLoading = false;
    }

    private async Task<(string Email, UserPreferences Preferences)> GetUserEmailAndPreferences()
    {
        var authState = await AuthService.GetAuthenticationStateAsync();
        var email = authState.User.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
        if (email != null)
        {
            var userPreferences = await UserClientService.GetUserPreferencesAsync(email);
            return (email, userPreferences);
        }
        throw new InvalidOperationException("User is not authenticated or email is missing.");
    }

    private async Task RegeneratePlan()
    {
        isRegeneratingMealPlan = true;

        try
        {
            var (email, userPreferences) = await GetUserEmailAndPreferences();
            await MealPlanClientService.RegenerateMealPlanAsync(email, userPreferences);
            weeklyPlan = await MealPlanClientService.GetWeeklyPlanAsync(email);
            StateHasChanged();
        }
        catch (InvalidOperationException ex)
        {
            // Handle the exception (e.g., show a message to the user)
        }
        finally
        {
            isRegeneratingMealPlan = false;
        }
    }

    private async Task LikeRecipe(Recipe recipe)
    {
        await MealPlanClientService.LikeRecipeAsync(recipe);
    }

    private async Task DislikeRecipe(Recipe recipe)
    {
        //Ask user anything we should change? 
        //want hot/cold, spicy/sweet? etc

        isRegeneratingMealPlan = true;
        try
        {
            var (email, userPreferences) = await GetUserEmailAndPreferences();
            await MealPlanClientService.ReplaceRecipe(email, recipe.Id, userPreferences);
            weeklyPlan = await MealPlanClientService.GetWeeklyPlanAsync(email);
            StateHasChanged();
        }
        catch (InvalidOperationException ex)
        {
            // Handle the exception (e.g., show a message to the user)
        }
        finally
        {
            isRegeneratingMealPlan = false;
        }
    }

    private void ViewRecipe(Recipe recipe)
    {
        var parameters = new DialogParameters { ["Recipe"] = recipe };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<RecipeDialog>("Recipe Details", parameters, options);
    }

    private void ViewGroceryList()
    {
        Navigation.NavigateTo("/grocery-list");
    }

    private void AdjustMealPlan()
    {
        Navigation.NavigateTo("/adjust-plan");
    }
}
