@page "/signup"
@using ASGShared.Models
@using ASG.Services
@using FluentValidation
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationService AuthService
@inject HttpClient HttpClient
@inject UserClientService UserClientService
@using MudBlazor

<MudContainer Color="Color.Primary" MaxWidth="MaxWidth.Small" Class="d-flex flex-column align-center justify-center" Style="height: 100vh;">
    <MudPaper Elevation="0" Class="pa-8 d-flex flex-column align-center">
        <MudContainer>
            <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Welcome!</MudText>
            <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">Let’s Get You Started</MudText>
            <MudText Typo="Typo.caption" Align="Align.Center" Class="mb-4">(you'll be able to tweak these preferences later)</MudText>
            <br/>
        </MudContainer>
        <MudDivider />
        <br />
        <MudPaper Width="100%" Elevation="0" Class="pa-4">
            <MudText Typo="Typo.subtitle2" Color="Color.Error">@errorMessage</MudText>
            <MudForm Model="@user" @ref="form" Validation="@(userValidator.ValidateValue)" ValidationDelay="0">
                <MudTextField Class="mb-2" @bind-Value="user.Name" For="@(() => user.Name)" Label="Name" Immediate="true" />
                <MudTextField Class="mb-2" @bind-Value="user.Email" For="@(() => user.Email)" Label="Email" Immediate="true" Disabled="true" />
                <MudTextField Class="mb-2" @bind-Value="user.DisplayName" For="@(() => user.DisplayName)" Label="Display Name" Immediate="true" />
                <MudTextField Class="mb-2" @bind-Value="user.HouseholdSize" For="@(() => user.HouseholdSize)" Label="Household Size" Immediate="true" />
                <MudContainer Class="my-4">
                    <MudText Typo="Typo.subtitle1">Cooking Skill Level: @user.CookingSkillLevel</MudText>
                    <MudSlider @bind-Value="user.CookingSkillLevel" Min="1" Max="10" Step="1" Style="width: 100%;" />
                </MudContainer>
                <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSubmit">Sign Up</MudButton>
            </MudForm>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    private MudForm form;
    private User user = new User();
    private string errorMessage;
    private UserValidator userValidator = new UserValidator();

    protected override async Task OnInitializedAsync()
    {
        var email = await AuthService.GetAuthenticatedUserEmailAsync();
        if (email != null)
        {
            user.Email = email;
        }
        else
        {
            Navigation.NavigateTo("/signin");
        }
    }

    private async Task HandleSubmit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            Console.WriteLine("Form is valid.");
            await HandleValidSubmit();
        }
        else
        {
            Console.WriteLine("oops! it looks like we're missing some required fields.");
            HandleInvalidSubmit();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            Console.WriteLine("Form is valid and submitted.");
            var createdUser = await UserClientService.CreateUserAsync(user);
            if (createdUser != null)
            {
                Navigation.NavigateTo("/");
                StateHasChanged();
            }
            else
            {
                errorMessage = "Error: Unable to create user.";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Exception: " + ex.Message;
            Console.WriteLine(errorMessage);
        }
    }

    private void HandleInvalidSubmit()
    {
        errorMessage = "Form is invalid. Please check the input fields.";
        Console.WriteLine(errorMessage);
    }
}
