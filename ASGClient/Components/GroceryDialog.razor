@using ASGShared.Models
@inject MudBlazor.IDialogService DialogService
@inject IJSRuntime JsRuntime
@using MudBlazor

<MudDialog>
    <DialogContent>
        <MudList T="string">
            @foreach (var ingredient in Ingredients)
            {
                <MudListItem T="string">@ingredient</MudListItem>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="CopyToClipboard">
            <MudIcon Icon="@Icons.Material.Filled.ContentCopy" Class="mr-2" />
            Copy List
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Dark" OnClick="CloseDialog">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public List<string> Ingredients { get; set; } = new List<string>();

    private void CloseDialog() => MudDialog.Close();

    private async Task CopyToClipboard()
    {
        var ingredientsText = string.Join(", ", Ingredients);
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", ingredientsText);
    }
}
