@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime
@using MudBlazor
@inject FirebaseService FirebaseService
@using System.Security.Claims
@inject IDialogService DialogService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject UserClientService UserClientService

<CascadingAuthenticationState>
    <MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="@ASGTheme" DefaultScrollbar="true" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <MudLayout>
        <MudMainContent>
            @Body
        </MudMainContent>
        <MudAppBar Bottom="true" Fixed="true">
            <AuthorizeView>
                <Authorized>
                    <MudGrid Justify="Justify.FlexEnd" AlignItems="AlignItems.Center">
                        <MudItem Class="align-center">
                            <MudText Typo="Typo.h6" Color="Color.Dark"> @(_displayName ?? "Loading...") </MudText>
                        </MudItem>
                        <MudItem Class="align-center">
                            <MudButton Variant="Variant.Filled" Color="Color.Transparent" OnClick="Logout" Class="ml-2">Logout</MudButton>
                        </MudItem>
                        </MudGrid>
                    </Authorized>
                </AuthorizeView>
            </MudAppBar>
        </MudLayout>
    </CascadingAuthenticationState>

@code {
    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;
    [CascadingParameter] private Task<AuthenticationState> AuthStateTask { get; set; } = default!;
    private string? _displayName;

    private MudTheme ASGTheme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                Primary = "#3490dc", // Updated primary color
                Secondary = "#ffed4a", // Updated secondary color
                Background = "#f8fafc", // Updated background color
                AppbarBackground = "#ffffff", // Updated appbar background color
                DrawerBackground = "#ffffff", // Updated drawer background color
                DrawerText = Colors.Shades.Black, // Updated drawer text color
                DrawerIcon = Colors.Shades.Black // Updated drawer icon color
            },
            PaletteDark = new PaletteDark()
            {
                Primary = "#3490dc", // Updated primary color
                Secondary = "#ffed4a", // Updated secondary color
                Background = "#2d3748", // Updated background color
                AppbarBackground = "#1a202c", // Updated appbar background color
                DrawerBackground = "#1a202c", // Updated drawer background color
                DrawerText = Colors.Shades.White, // Updated drawer text color
                DrawerIcon = Colors.Shades.White // Updated drawer icon color
            }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_mudThemeProvider != null)
            {
                _isDarkMode = await _mudThemeProvider.GetSystemPreference();
                await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            }

            await CheckAuthenticationState();
            await LoadUserDisplayName();
            StateHasChanged();
        }
    }

    private async Task CheckAuthenticationState()
    {
        var authState = await AuthStateTask;
        var user = authState.User;

        if (user != null && !user.Identity?.IsAuthenticated == true && !IsExcludedFromAuth())
        {
            Console.WriteLine("User is not authenticated, redirecting to home.");
            Navigation.NavigateTo("/");
        }
    }

    private async Task LoadUserDisplayName()
    {
        var email = await AuthService.GetAuthenticatedUserEmailAsync();
        if (!string.IsNullOrEmpty(email))
        {
            var user = await UserClientService.GetUserAsync(email);
            _displayName = user?.DisplayName;
        }
    }

    private bool IsExcludedFromAuth()
    {
        bool excludedFromAuth = Navigation.Uri.EndsWith("/explore", StringComparison.OrdinalIgnoreCase);
        if (excludedFromAuth) { Console.WriteLine("User is excluded from authentication on this page."); } //verbose only

        return excludedFromAuth;
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.Refresh();
    }
}
