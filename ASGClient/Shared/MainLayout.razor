@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime
@using MudBlazor
@inject FirebaseService FirebaseService
@using System.Security.Claims
@inject IDialogService DialogService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject UserClientService UserClientService

<CascadingAuthenticationState>
        <!-- MudThemeProvider should not contain any child components -->
        <MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="@ASGTheme" DefaultScrollbar="true" />

        <!-- Move child content outside of the MudThemeProvider -->
        <MudPopoverProvider />
        <MudDialogProvider />
        <MudSnackbarProvider />

        <!-- Your layout content -->
        <MudLayout>

            @if (isAuthenticated && !IsSignUpPage)
            {
                <MudAppBar Elevation="0" Color="Color.Primary">
                    <MudContainer>
                        <MudGrid Justify="Justify.SpaceBetween" AlignItems="center">
                            <MudItem>
                                <MudText Typo="Typo.h5">anything sounds good</MudText>
                            </MudItem>
                            <MudItem>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Style="color: white;" OnClick="NavigateToSettings" />
                            </MudItem>
                        </MudGrid>
                    </MudContainer>
                </MudAppBar>

            }
            else if (isLoading)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            }
            <MudMainContent>
                @* Not all pages require authentication *@
                @if (isAuthenticated || IsExcludedFromAuth())
                {
                    @Body
                }
                else
                {
                    <MudContainer Color="Color.Primary" MaxWidth="MaxWidth.Small" Class="d-flex flex-column align-center justify-center" Style="height: 100vh;">
                        <MudPaper Elevation="0" Class="pa-8 d-flex flex-column align-center">
                            <MudContainer>
                                <MudImage Src="/images/logo.png" Fluid="true" Height="40" ObjectPosition="ObjectPosition.Center"></MudImage>
                                <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">anything sounds good</MudText>
                                <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-4">effortless, personalized recipes for you and your family.</MudText>
                            </MudContainer>
                            <MudDivider />
                            <br />
                            <MudPaper Width="100%" Elevation="0" Class="pa-4">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" StartIcon="@Icons.Custom.Brands.Google" Class="mb-3" OnClick="GoogleSignIn">
                                    Continue with Google
                                </MudButton>
                                <br />
                                <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-4">
                                    <center>By continuing, you agree to our Terms and Usage Policy, and acknowledge our Privacy Policy.</center>
                                </MudText>
                            </MudPaper>

                            <MudLink Href="#" Underline="Underline.Always" Class="mt-6">Learn more</MudLink>
                        </MudPaper>
                    </MudContainer>
                }
            </MudMainContent>
            <MudAppBar Bottom="true" Fixed="true">
                <AuthorizeView>
                    <Authorized>
                        <MudGrid Justify="Justify.FlexEnd" AlignItems="AlignItems.Center">
                            <MudItem>
                                <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                               Color="Color.Primary"
                                               OnClick="ToggleTheme"
                                               Class="ml-auto" />
                            </MudItem>
                            <MudItem Class="align-center">
                                <MudText Typo="Typo.h6" Color="Color.Primary"> @(_displayName ?? string.Empty) </MudText>
                            </MudItem>
                            <MudItem Class="align-center">
                            @if (isAuthenticated)
                            {
                                <MudButton Variant="Variant.Outlined" Color="@(_isDarkMode ? Color.Primary :  Color.Dark)" OnClick="Logout" Class="ml-2">Logout</MudButton>
                            }
                        </MudItem>
                            </MudGrid>
                        </Authorized>
                    </AuthorizeView>
                </MudAppBar>
            </MudLayout>
</CascadingAuthenticationState>

@code {
    private MudThemeProvider? _mudThemeProvider;
    private bool _isDarkMode;
    private MudTheme ASGTheme = new MudTheme
        {
            PaletteLight = new PaletteLight()
            {
                Primary = "#4CAF93",       /* Muted Green (main branding color) */
                Secondary = "#80DEEA",      /* Soft Aqua (for secondary actions) */
                Background = "#F9F9F9",     /* Very Light Grey (main background) */
                AppbarBackground = "#F5F5F5",  /* Gray (for app bar/header) */
                DrawerBackground = "#E0F2F1",  /* Light Mint Green (drawer background) */
                DrawerText = "#2E2E2E",      /* Dark Charcoal Grey (drawer text for readability) */
                DrawerIcon = "#4CAF93",      /* Muted Green (icons matching primary color) */
                Success = "#66BB6A",        /* Soft Green (positive feedback) */
                Warning = "#FFC107",        /* Muted Orange (subtle warning) */
                Info = "#64B5A6",           /* Light Blue (informational feedback) */
                Error = "#EF5350"
            },
            PaletteDark = new PaletteDark()
            {
                Primary = "#81C784",        /* Soft Green (main branding color) */
                Secondary = "#4DD0E1",      /* Light Aqua (for secondary actions) */
                Background = "#121212",     /* Dark Grey (main background) */
                AppbarBackground = "#1F1F1F",  /* Almost Black (for app bar/header) */
                DrawerBackground = "#212121", /* Darker Grey (drawer background) */
                DrawerText = "#E0E0E0",      /* Light Grey (drawer text for readability) */
                DrawerIcon = "#81C784",      /* Soft Green (icons matching primary color) */
                Success = "#66BB6A",        /* Soft Green (positive feedback) */
                Warning = "#FFB74D",        /* Muted Yellow-Orange (warning feedback) */
                Info = "#4FC3F7",           /* Light Blue (informational feedback) */
                Error = "#E57373"          /* Soft Red (error feedback) */
            }
        };

    [CascadingParameter] private Task<AuthenticationState> AuthStateTask { get; set; } = default!;
    private string? _displayName;
    private bool isLoading = true;
    private bool isAuthenticated;
    private bool IsSignUpPage => Navigation.Uri.Contains("/signup");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_mudThemeProvider != null)
            {
                _isDarkMode = await _mudThemeProvider.GetSystemPreference();
                await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            }

            await CheckAuthenticationState();
            await LoadUserDisplayName();
            StateHasChanged();
        }
    }

    private async Task GoogleSignIn()
    {
        await AuthService.SignInWithGoogleAsync();
        StateHasChanged();
    }

    private async Task CheckAuthenticationState()
    {
        var authState = await AuthStateTask;
        var user = authState.User;

        isAuthenticated = user?.Identity?.IsAuthenticated ?? false;

        if (user != null && !isAuthenticated && !IsExcludedFromAuth())
        {
            Console.WriteLine("User is not authenticated, redirecting to home.");
            Navigation.NavigateTo("/");
        }

        isLoading = false;
    }

    private async Task NavigateToSettings()
    {
        Navigation.NavigateTo("/settings");
    }

    private async Task ToggleTheme()
    {
        if (_mudThemeProvider != null)
        {
            _isDarkMode = !_isDarkMode;
            await _mudThemeProvider.SystemPreferenceChanged(_isDarkMode);
        }
    }

    private async Task LoadUserDisplayName()
    {
        var authState = await AuthStateTask;
        var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (Guid.TryParse(userIdClaim, out var userId))
        {
            var user = await UserClientService.GetUserAsync(userId);
            _displayName = user?.DisplayName;
        }
    }

    private bool IsExcludedFromAuth()
    {
        var currentUri = Navigation.Uri;
        return currentUri.Contains("/signup");
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.Refresh();
    }
}
