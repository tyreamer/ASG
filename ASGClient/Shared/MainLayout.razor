@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime
@using MudBlazor
@inject FirebaseService FirebaseService
@using System.Security.Claims
@inject IDialogService DialogService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject UserClientService UserClientService

<CascadingAuthenticationState>
    <!-- MudThemeProvider should not contain any child components -->
    <MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="@ASGTheme" DefaultScrollbar="true" />

    <!-- Move child content outside of the MudThemeProvider -->
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <!-- Your layout content -->
    <MudLayout>
        <MudAppBar Elevation="0" Color="Color.Primary">
            <MudContainer Class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
                <MudText Typo="Typo.h5">Anything sounds good.</MudText>
                @if (isLoading)
                {
                    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                }
                else if (!isAuthenticated)
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="SignInWithGoogle">
                        Sign In with Google
                    </MudButton>
                }
            </MudContainer>
        </MudAppBar>
        <MudMainContent>
            @Body
        </MudMainContent>
        <MudAppBar Bottom="true" Fixed="true">
            <AuthorizeView>
                <Authorized>
                    <MudGrid Justify="Justify.FlexEnd" AlignItems="AlignItems.Center">
                        <MudItem>
                            <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                           Color="Color.Primary"
                                           OnClick="ToggleTheme"
                                           Class="ml-auto" />
                        </MudItem>
                        <MudItem Class="align-center">
                            <MudText Typo="Typo.h6" Color="Color.Primary"> @(_displayName ?? "Loading...") </MudText>
                        </MudItem>
                        <MudItem Class="align-center">
                            <MudButton Variant="Variant.Filled" Color="@(_isDarkMode ? Color.Primary :  Color.Dark)" OnClick="Logout" Class="ml-2">Logout</MudButton>
                        </MudItem>
                    </MudGrid>
                </Authorized>
            </AuthorizeView>
        </MudAppBar>
    </MudLayout>
</CascadingAuthenticationState>

@code {
    private MudThemeProvider? _mudThemeProvider;
    private bool _isDarkMode;
    private MudTheme ASGTheme = new MudTheme
        {
            PaletteLight = new PaletteLight()
            {
                Primary = "#4CAF93",       /* Muted Green (main branding color) */
                Secondary = "#80DEEA",      /* Soft Aqua (for secondary actions) */
                Background = "#F9F9F9",     /* Very Light Grey (main background) */
                AppbarBackground = "#F5F5F5",  /* Gray (for app bar/header) */
                DrawerBackground = "#E0F2F1",  /* Light Mint Green (drawer background) */
                DrawerText = "#2E2E2E",      /* Dark Charcoal Grey (drawer text for readability) */
                DrawerIcon = "#4CAF93",      /* Muted Green (icons matching primary color) */
                Success = "#66BB6A",        /* Soft Green (positive feedback) */
                Warning = "#FFC107",        /* Muted Orange (subtle warning) */
                Info = "#64B5A6",           /* Light Blue (informational feedback) */
                Error = "#EF5350"
            },
            PaletteDark = new PaletteDark()
            {
                Primary = "#81C784",        /* Soft Green (main branding color) */
                Secondary = "#4DD0E1",      /* Light Aqua (for secondary actions) */
                Background = "#121212",     /* Dark Grey (main background) */
                AppbarBackground = "#1F1F1F",  /* Almost Black (for app bar/header) */
                DrawerBackground = "#212121", /* Darker Grey (drawer background) */
                DrawerText = "#E0E0E0",      /* Light Grey (drawer text for readability) */
                DrawerIcon = "#81C784",      /* Soft Green (icons matching primary color) */
                Success = "#66BB6A",        /* Soft Green (positive feedback) */
                Warning = "#FFB74D",        /* Muted Yellow-Orange (warning feedback) */
                Info = "#4FC3F7",           /* Light Blue (informational feedback) */
                Error = "#E57373"          /* Soft Red (error feedback) */
            }
        };

    [CascadingParameter] private Task<AuthenticationState> AuthStateTask { get; set; } = default!;
    private string? _displayName;
    private bool isLoading = true;
    private bool isAuthenticated;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_mudThemeProvider != null)
            {
                _isDarkMode = await _mudThemeProvider.GetSystemPreference();
                await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            }

            await CheckAuthenticationState();
            await LoadUserDisplayName();
            StateHasChanged();
        }
    }

    private async Task CheckAuthenticationState()
    {
        var authState = await AuthStateTask;
        var user = authState.User;

        isAuthenticated = user?.Identity?.IsAuthenticated ?? false;

        if (user != null && !isAuthenticated && !IsExcludedFromAuth())
        {
            Console.WriteLine("User is not authenticated, redirecting to home.");
            Navigation.NavigateTo("/");
        }

        isLoading = false;
    }

    private async Task ToggleTheme()
    {
        if (_mudThemeProvider != null)
        {
            _isDarkMode = !_isDarkMode;
            await _mudThemeProvider.SystemPreferenceChanged(_isDarkMode);
        }
    }

    private async Task LoadUserDisplayName()
    {
        var email = await AuthService.GetAuthenticatedUserEmailAsync();
        if (!string.IsNullOrEmpty(email))
        {
            var user = await UserClientService.GetUserAsync(email);
            _displayName = user?.DisplayName;
        }
    }

    private bool IsExcludedFromAuth()
    {
        bool excludedFromAuth = Navigation.Uri.EndsWith("/explore", StringComparison.OrdinalIgnoreCase);
        if (excludedFromAuth)
        {
            Console.WriteLine("User is excluded from authentication on this page."); // Verbose only
        }

        return excludedFromAuth;
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.Refresh();
    }

    private async Task SignInWithGoogle()
    {
        var user = await AuthService.SignInWithGoogleAsync();
        if (user != null)
        {
            var isRegistered = await AuthService.IsUserRegisteredAsync(user.Email);
            if (!isRegistered)
            {
                Navigation.NavigateTo($"/signup?name={Uri.EscapeDataString(user.DisplayName)}&email={Uri.EscapeDataString(user.Email)}");
            }
            else
            {
                Navigation.Refresh();
            }
        }
    }
}
