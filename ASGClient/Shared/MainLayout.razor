@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime
@using MudBlazor
@inject FirebaseService FirebaseService
@using System.Security.Claims
@inject IDialogService DialogService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject UserClientService UserClientService

<CascadingAuthenticationState>
    <!-- MudThemeProvider should not contain any child components -->
    <MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="@ASGTheme" DefaultScrollbar="true" />

    <!-- Move child content outside of the MudThemeProvider -->
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <!-- Your layout content -->
    <MudLayout>
        <MudMainContent>
            @Body
        </MudMainContent>
        <MudAppBar Bottom="true" Fixed="true">
            <AuthorizeView>
                <Authorized>
                    <MudGrid Justify="Justify.FlexEnd" AlignItems="AlignItems.Center">
                        <MudItem>
                            <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                           Color="Color.Primary"
                                           OnClick="ToggleTheme"
                                           Class="ml-auto" />
                        </MudItem>
                        <MudItem Class="align-center">
                            <MudText Typo="Typo.h6" Color="Color.Primary"> @(_displayName ?? "Loading...") </MudText>
                        </MudItem>
                        <MudItem Class="align-center">
                            <MudButton Variant="Variant.Filled" Color="@(_isDarkMode ? Color.Primary :  Color.Dark)" OnClick="Logout" Class="ml-2">Logout</MudButton>
                        </MudItem>
                    </MudGrid>
                </Authorized>
            </AuthorizeView>
        </MudAppBar>
    </MudLayout>
</CascadingAuthenticationState>

@code {
    private MudThemeProvider? _mudThemeProvider;
    private bool _isDarkMode;
    private MudTheme ASGTheme = new MudTheme
        {
            PaletteLight = new PaletteLight()
            {
                Primary = "#ff6f61", // Warm red-orange for energy
                Secondary = "#4caf50", // Fresh green for health
                Background = "#fdf7f2", // Soft off-white for a cozy atmosphere
                AppbarBackground = "#ffffff", // Clean white appbar background
                DrawerBackground = "#f4f4f4", // Light neutral for subtle contrast
                DrawerText = "#333333", // Dark gray for readability
                DrawerIcon = "#4caf50" // Consistent fresh green for icons
            },
            PaletteDark = new PaletteDark()
            {
                Primary = "#ff6f61", // Same warm red-orange for consistency
                Secondary = "#4caf50", // Same fresh green
                Background = "#2c3e50", // Deep slate blue for a modern look
                AppbarBackground = "#1f2a34", // Slightly lighter tone for definition
                DrawerBackground = "#1f2a34", // Unified dark tone
                DrawerText = "#ffffff", // White text for readability
                DrawerIcon = "#4caf50" // Fresh green icons for consistency
            }
        };

    [CascadingParameter] private Task<AuthenticationState> AuthStateTask { get; set; } = default!;
    private string? _displayName;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_mudThemeProvider != null)
            {
                _isDarkMode = await _mudThemeProvider.GetSystemPreference();
                await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            }

            await CheckAuthenticationState();
            await LoadUserDisplayName();
            StateHasChanged();
        }
    }

    private async Task CheckAuthenticationState()
    {
        var authState = await AuthStateTask;
        var user = authState.User;

        if (user != null && !user.Identity?.IsAuthenticated == true && !IsExcludedFromAuth())
        {
            Console.WriteLine("User is not authenticated, redirecting to home.");
            Navigation.NavigateTo("/");
        }
    }

    private async Task ToggleTheme()
    {
        if (_mudThemeProvider != null)
        {
            _isDarkMode = !_isDarkMode;
            await _mudThemeProvider.SystemPreferenceChanged(_isDarkMode);
        }
    }

    private async Task LoadUserDisplayName()
    {
        var email = await AuthService.GetAuthenticatedUserEmailAsync();
        if (!string.IsNullOrEmpty(email))
        {
            var user = await UserClientService.GetUserAsync(email);
            _displayName = user?.DisplayName;
        }
    }

    private bool IsExcludedFromAuth()
    {
        bool excludedFromAuth = Navigation.Uri.EndsWith("/explore", StringComparison.OrdinalIgnoreCase);
        if (excludedFromAuth)
        {
            Console.WriteLine("User is excluded from authentication on this page."); // Verbose only
        }

        return excludedFromAuth;
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.Refresh();
    }
}
